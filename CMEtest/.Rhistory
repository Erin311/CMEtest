"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
eDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
fDic <- c("Id", "mpfilter")
names(fDic) <- fList
assign(x = "smoothDic", value = sDic, envir = .envDic)
assign(x = "estimDic", value = eDic, envir = .envDic)
assign(x = "shrinkDic", value = shDic, envir = .envDic)
assign(x = "filterDic", value = fDic, envir = .envDic)
ls(.envDic)
.MakeSpec <- function(buildingBlock, method, control, ...) {
## Reconstructing dic name
dic <- paste0(buildingBlock, "Dic")
if(!(method %in% names(get(dic, envir = .envDic))))
stop(paste("Unrecognized", buildingBlock, "method"))
CALL <- mget(names(formals()), sys.frame(sys.nframe()))
specObj <- list() #generic object
specObj[['.rawCall']] <- CALL # Kepeeping the Raw call
specObj[['.passCall']] <- list(fun = get(dic, envir = .envDic)[[method]],
funCall = control,
funMethod = method)
class(specObj) <- c(paste0("CME",buildingBlock,"Spec"), "CMEbbspec") # Building blocks will be considered as sperate objects
return(specObj)
}
# Defining cov spec function
##' Covariance specification object Constructor.
##' .. content for \description{} (no empty lines) ..
##' This function allows specification of a covariance objects.
##' .. content for \details{} ..
##'
##' @title General Interface for covariance matrix specification
##' @param smooth character specifying to smoothing method.
##' @param smoothCtrl list containing smoothing parameters
##' @param estim  character specifying which estimation methods ('mle', 'mcd', 'mve,...)
##' @param estimCtrl list containing estimation parameters
##' @param shrink character specifying which covariance shrinkage methode to choose
##' @param shrinkCtrl list containing shrinkage parameters
##' @param filter character specifying which filtering method to choose
##' @param filterCtrl list containing filtering parameters
##' @return CMEspec: S3 object containing complete specification
##' @author Mohamed Ishmael Diwan Belghazi
##' @import robust
##' @export
CovSpec <- function(smooth = NULL,
smoothCtrl = list(),
estim = "auto",
estimCtrl = list(),
shrink = NULL,
shrinkCtrl = list(),
filter = NULL,
filterCtrl = list(), ...) {
## Recording call. match.call() is not enough for printing default argument.
CALL <- mget(names(formals()),sys.frame(sys.nframe()))
## Creating object
spec <- list(smooth = .MakeSpec("smooth", smooth, smoothCtrl),
estim  = .MakeSpec("estim", estim, estimCtrl),
shrink = .MakeSpec("shrink", shrink, shrinkCtrl) ,
filter = .MakeSpec("filter", filter, filterCtrl))
spec[['CALL']] <- CALL
class(spec) <-'CMEspec'
return(spec)
}
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
class(myCov)
class(myCov$smooth)
bbCategories <- c("smooth", "estim", "shrink", "filter")
## Creating environment holding dictionaries
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign(bbCategories, bbCategories, envir= .envDic)
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign(bbCats, bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
sDic = c("IdSmooth", "EWMASmooth")
names(sDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
eDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
fDic <- c("Id", "mpfilter")
names(fDic) <- fList
assign(x = "smoothDic", value = sDic, envir = .envDic)
assign(x = "estimDic", value = eDic, envir = .envDic)
assign(x = "shrinkDic", value = shDic, envir = .envDic)
assign(x = "filterDic", value = fDic, envir = .envDic)
ls(.envDic)
get("fDic")
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
smoothDic = c("IdSmooth", "EWMASmooth")
names(smoothDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
estimDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shrinkDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shrinkDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
filterDic <- c("Id", "mpfilter")
names(filterDic) <- fList
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
smoothDic = c("IdSmooth", "EWMASmooth")
names(smoothDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
estimDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shrinkDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shrinkDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
filterDic <- c("Id", "mpfilter")
names(filterDic) <- fList
lapply(get(bbCategories,envir= .envDic),
function(X) assign(get(paste0(X,"Dic"),get(paste0(X,"Dic")),envir = .envDic)
########################################################
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
smoothDic = c("IdSmooth", "EWMASmooth")
names(smoothDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
estimDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shrinkDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shrinkDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
filterDic <- c("Id", "mpfilter")
names(filterDic) <- fList
ls(.envDic)
lapply(get(bbCategories,envir = .envDic),
function(X) assign(get(paste0(X,"Dic")), get(paste0(X,"Dic")), envir = .envDic))
get(bbCategories,envir = .envDic)
get(bbCategories,envir = .envDic)
get("bbCategories",envir = .envDic)
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
smoothDic = c("IdSmooth", "EWMASmooth")
names(smoothDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
estimDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shrinkDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shrinkDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
filterDic <- c("Id", "mpfilter")
names(filterDic) <- fList
lapply(get("bbCategories",envir = .envDic),
function(X) assign(get(paste0(X,"Dic")), get(paste0(X,"Dic")), envir = .envDic))
## Creating environment holding dictionaries
.envDic <- new.env(hash = TRUE, parent = .GlobalEnv)
## Specifying buildingblocks categories
bbCategories <- c("smooth", "estim", "shrink", "filter")
assign("bbCategories", bbCategories, envir= .envDic)
## Internal function to build the dictionaries
dicName <- c("sDic", "eDic", "shDic", "fdic")
## Smoothing methods
sList = c("Id", "EWMA")
smoothDic = c("IdSmooth", "EWMASmooth")
names(smoothDic) <- sList
## Estimation methods
reList <- c("auto",
"mcd",
"weighted",
"donostah",
"pairwiseQC",
"pairwiseGK")
reDic <- rep('covRob', length(reList))
names(reDic) <- reList
ceList <- c("mle")
ceDic <- rep('covClassic', length(ceList))
names(ceDic) <- ceList
estimDic <- c(ceDic, reDic)
## Shrinking methods
shList <- c("Id", "LW", "NLW")
shrinkDic <- c("Id", "LedoitWolf", "NLNledoitWold")
names(shrinkDic) <- shList
## Filtering methods
fList <- c("Id", "Marcenko-Pastur")
filterDic <- c("Id", "mpfilter")
names(filterDic) <- fList
lapply(get("bbCategories",envir = .envDic),
function(X) assign(paste0(X,"Dic"), get(paste0(X,"Dic")), envir = .envDic))
ls(.envDic)
sapply(get("bbCategories",envir = .envDic),
function(X) assign(paste0(X,"Dic"), get(paste0(X,"Dic")), envir = .envDic))
ls(.envDic)
[
<-
formals("<-")
deparse("hellp")
deparse("hello")
parse("hello")
a <- list(parse(text="hello") = 5)
parse(text="hello")
hello = 5
substitute(parse(text="hello"))
eval(parse(text="hello"))
eval(parse(text="hellop"))
list(eval(parse(text="hellop")) = 5)
CovSpec <- function(smooth = NULL,
smoothCtrl = list(),
estim = "auto",
estimCtrl = list(),
shrink = NULL,
shrinkCtrl = list(),
filter = NULL,
filterCtrl = list(), ...) {
## Recording call. match.call() is not enough for printing default argument.
CALL <- mget(names(formals()),sys.frame(sys.nframe()))
## Creating object
spec <- list()
spec <- sapply(get(bbCategories, envir=.envDic),
function(X) {spec[[X]] <- .MakeSpec(X, get(X), get(paste0(X, "Ctrl")))})
#  spec <- list(smooth = .MakeSpec("smooth", smooth, smoothCtrl),
#               estim  = .MakeSpec("estim", estim, estimCtrl),
#               shrink = .MakeSpec("shrink", shrink, shrinkCtrl) ,
#               filter = .MakeSpec("filter", filter, filterCtrl))
spec[['CALL']] <- CALL
class(spec) <-'CMEspec'
return(spec)
}
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
dic
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
a <- get(bbCategories, envir=.envDic)
a
exit
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
myCov
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
myCov
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
myCov <- CovSpec(smooth= "EWMA",estim="mcd",shrink="LW",filter="Marcenko-Pastur")
myCov$smooth$.passCall$fun
myCov$smooth$.passCall$funCall
myCov$smooth$.passCall$funMethod
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
summary(myCov)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
summary(myCov)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
Estimate(specObj = myCov$smooth, data)
debug(Estimate.CMEsmoothSpec)
Estimate(specObj = myCov$smooth, data)
smoothFUN
smoothFUN
smoothArgs
specObj
debugSource('~/dev/CMEtest/CMEtest/R/specConstructors.R')
debug(Estimate.CMEsmoothSpec)
Estimate(specObj = myCov$smooth, data)
smoothFUN
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
debug(Estimate.CMEsmoothSpec)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
Estimate(specObj = myCov$smooth, data)
smoothFUN
smoothArgs
estos <- Estimate(specObj = myCov$smooth, data)
smoothArgs
smoothArgs[['data]]
data
data
require(tawny)
data(sp500.subset)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source("smoother.R")
getwd()
setwd("./R")
getwd()
source("smoother.R")
require(tawny)
R <- sp500.subset
R <- data(sp500.subset)
R
data(sp500.subset)
R <- sp500.subset
R
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
summary(myCov)
source("smoother.R")
Estimate(myCov$smooth)
Estimate(myCov$smooth, R)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
require(data)
require(robust)
require(tawny)
data <- data(sp500.subset)
data
data
data(sp500.subset)
data <- sp500.subset
myCov <- CovSpec(smooth= "Id",estim="mcd",shrink="Id",filter="Marcenko-Pastur")
myCov <- CovSpec(smooth= "None",estim="mcd",shrink="None",filter="Marcenko-Pastur")
smoothdata <- Estimate(myCov$smooth)
smoothdata <- Estimate(myCov$smooth, data)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
myCov <- CovSpec(smooth= "None",estim="mcd",shrink="None",filter="Marcenko-Pastur")
smoothdata <- Estimate(myCov$smooth, data)
smoothdata
debug(Estimate.CMEestimSpec)
smoothdata <- Estimate(myCov$smooth, smoothData)
smoothdata
smoothdata <- Estimate(myCov$smooth, smoothdata)
myCov <- CovSpec(smooth= "None",estim="mcd",shrink="None",filter="Marcenko-Pastur")
smoothdata <- Estimate(myCov$smooth, data)
covest <- Estimate(specObj=myCov$estim, smoothdata)
estimFUN
names(EstimArgs)
names(estimArgs)
specObj
specObj$.passCall$funCall
covRob(data,estim="mcd")
covest <- Estimate(specObj=myCov$estim, smoothdata)
class(estimArgs)
names(estimArgs)
clas(estimArgs$data)
class(estimArgs$data)
class(data)
do.call("covRob", list(data = data))
do.call("covRob", list(data = sp500.subset))
do.call("covRob", list(data = as.xts(sp500.subset)))
covRob(data=data)
covRob(data=as.matrix(data))
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
covest <- Estimate(specObj=myCov$estim, smoothdata)
covest$covEst$cov
class(covest$smoothData)
class(covest$smoothData)
class(covest$covEst)
plot.covRob(covest$covEst)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
require(robust)
require(tawny)
data(sp500.subset)
myCov <- CovSpec(smooth= "None",estim="mcd",shrink="None",filter="Marcenko-Pastur")
smoothdata <- Estimate(myCov$smooth, data)
covest <- Estimate(myCov$estimm smoothdata)
covest <- Estimate(myCov$estim, smoothdata)
debug(Estimate.CMEestimSpec)
covest <- Estimate(myCov$estim, smoothdata)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
debug(Estimate.CMEestimSpec)
covest <- Estimate(myCov$estim, smoothdata)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
covest <- Estimate(myCov$estim, smoothdata)
estimFUN
debug(Estimate.CMEestimSpec)
covest <- Estimate(myCov$estim, smoothdata)
estimFUN
class(estimArgs)
class(data)
names(data)
data$smoothData
data <- sp500.subset
debug(Estimate.CMEestimSpec)
covest <- Estimate(myCov$estim, smoothdata)
myCov <- CovSpec(smooth= "None",estim="mcd",shrink="None",filter="Marcenko-Pastur")
smoothdata <- Estimate(myCov$smooth, data)
smoothdata$data
covest <- Estimate(myCov$estim, smoothdata)
covEst
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
covest <- Estimate(myCov$estim, smoothdata)
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
source('~/dev/CMEtest/CMEtest/R/specConstructors.R')
covest <- Estimate(myCov$estim, smoothdata)
